Index: code/server/sv_client.c
===================================================================
--- code/server/sv_client.c	(revision 490)
+++ code/server/sv_client.c	(working copy)
@@ -253,16 +253,17 @@
 		// separator for playerdb.patch and challengeping.patch
 		///////////////////////////////////////////////////////
 
-		ping = svs.time - svs.challenges[i].pingTime;
-
 		// Note that it is totally possible to flood the console and qconsole.log by being rejected
 		// (high ping, ban, server full, or other) and repeatedly sending a connect packet against the same
 		// challenge.  Prevent this situation by only logging the first time we hit SV_DirectConnect()
 		// for this challenge.
 		if (!svs.challenges[i].connected) {
+			ping = svs.time - svs.challenges[i].pingTime;
+			svs.challenges[i].challengePing = ping;
 			Com_Printf("Client %i connecting with %i challenge ping\n", i, ping);
 		}
 		else {
+			ping = svs.challenges[i].challengePing;
 			Com_DPrintf("Client %i connecting again with %i challenge ping\n", i, ping);
 		}
 		svs.challenges[i].connected = qtrue;
@@ -270,12 +271,8 @@
 		// never reject a LAN client based on ping
 		if ( !Sys_IsLANAddress( from ) ) {
 			if ( sv_minPing->value && ping < sv_minPing->value ) {
-				// don't let them keep trying until they get a big delay
 				NET_OutOfBandPrint( NS_SERVER, from, "print\nServer is for high pings only\n" );
 				Com_DPrintf ("Client %i rejected on a too low ping\n", i);
-				// reset the address otherwise their ping will keep increasing
-				// with each connect message and they'd eventually be able to connect
-				svs.challenges[i].adr.port = 0;
 				return;
 			}
 			if ( sv_maxPing->value && ping > sv_maxPing->value ) {
Index: code/server/server.h
===================================================================
--- code/server/server.h	(revision 490)
+++ code/server/server.h	(working copy)
@@ -191,6 +191,7 @@
 typedef struct {
 	netadr_t	adr;
 	int			challenge;
+	int			challengePing;
 	int			time;				// time the last packet was sent to the autherize server
 	int			pingTime;			// time the challenge response was sent to client
 	int			firstTime;			// time the adr was first used, for authorize timeout checks
